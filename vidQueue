#! /bin/bash

# This script downloads yt videos to a dir and notifies the user on start and completion
# It also logs to the user's home dir (assumed not to be run as root) in ~/.local/state/vidQueue/queue.log
# Run this script like:
# vidQueue https://hyperlink.com/whatever [filename] ['title']

# set the start time of the script
timeStart=$(date +%s)

# set some variables
# the directory you'll be downloading videos to
videoDir=$HOME/videos/yt

# the link to the video
link="${1}"

# the name you want to call the downloaded video. this variable is optional
filename="${2}"

# store the script PID
vidQueue_pid=$$

# these are problematic characters that can cause shell escapes
declare -a escape_these=( '!' '(' ')' )

# these are common extensions we might want to remove from names later on
declare -a extensions=('mp4' 'mp3' 'wmv' 'wav' 'webm' 'mkv')

# write to the logfile
writeLog () {
  logMessage=${1}
  priority=${2:-info}
  logger -p ${priority} "vidQueue [ ${randomVidId} ]: ${logMessage}"
#  echo "[ ${randomVidId} ]: ${1}" >> ${logfile}
  # this can be used to also write out to stdout and the logfile
#  echo "[ ${randomVidId} ]: ${1}" 2>&1 | tee -a ${logfile}
}

createLogging () {
  # define the log directories and files
  logdir=$HOME/.local/state/vidQueue
  logfilename=queue.log
  logfile=${logdir}/${logfilename}

  # check if the vidQueue dir doesn't exist, if so make it so we can log
  if [[ ! -d $HOME/.local/state/vidQueue/ ]]; then
    mkdir -p ${logdir}; mk_vidQueue_rc=$?
    touch ${logdir}/${logfilename}; touch_vidQueue_rc=$?
    # if the touch went wrong, possibly also the mkdir went wrong, tell us
    if [[ ${touch_vidQueue_rc} != 0 ]]; then
      logger "Something went wrong touching the vidQueue logfile. RC was: ${touch_vidQueue_rc}"
      notify-send -u critical "Something went wrong touching the vidQueue logfile. RC was: ${touch_vidQueue_rc}"
    else
      writeLog "No logdir existed, created one..."
    fi
  fi
}

# if we don't pass a title for the video, get one from yt-dlp
getFilename () {
  filename=$(/usr/bin/yt-dlp "${link}" --print filename --skip-download 2> /dev/null)
  # check if the filename has the extension at the end. if so, remove it
  for ext in "${extensions[@]}";
  do
    if [[ "${filename}" =~ "${ext}" ]]; then
      writeLog "Stripping the extension ( \"${ext}\" ) from the filename prior to appending one"
      filename=$(echo "$filename" | sed 's/\(.*\)\..*/\1/')
    fi
  done
  writeLog "Sleeping 10 seconds. I'm not a robot, I promise."
  sleep 10
}

# dont really understand this, but it works?
# source: https://stackoverflow.com/questions/6250698/how-to-decode-url-encoded-string-in-shell
decodeUrl() {
  link="${1//%/\\x}"
}

# generate a random number to associate with the download session
createVidId () {
  randomVidId=$RANDOM
  if [[ -f /tmp/${randomVidId}.lock ]]; then
    # generate a new random ID if we happen to get the same one
    writeLog "Lockfile /tmp/${randomVidId} already exists, creating another random vid id."
    randomVidId=$RANDOM
    writeLog "New lockfile id: ${randomVidId}"
  fi
}

# construct the download command to use once we have everything we need
constructDownloadCommand () {
  filename="${1}" # this is $1 input when the function is called, not when the script is called
  link="${2}" # this is $2 to the function
  # for those of us with older tech that doesn't handle 4K/120FPS so well
  format="-f bestvideo*[height<2160]+bestaudio"

  writeLog "Trying to get format of: /usr/bin/yt-dlp --simulate \"${format}\" \"${link}\""
  checkFormat=$(/usr/bin/yt-dlp --quiet --simulate "${format}" "${link}" 2> /dev/null); checkFormat_rc=$?

  # If we can't reduce the resolution to <2160, then just let yt-dlp get the best format itself
  if [[ ${checkFormat_rc} != 0 ]]; then
    writeLog "We couldn't restrict the resolution to <2160, so we're letting yt-dlp take over"
    unset format
    downloadCommand="/usr/bin/yt-dlp -o \"${videoDir}/${filename}.%(ext)s\" --restrict-filenames"
  else
    writeLog "Obtained requested lower-resolution format"
    downloadCommand="/usr/bin/yt-dlp -o \"${videoDir}/${filename}.%(ext)s\" --restrict-filenames \"${format}\""
  fi

  # Arbitrary sleep to prevent too many subsequent calls. Attempt to stop bot detection
  writeLog "Sleeping 30s. I'm not a robot, I just play one on TV."
  sleep 30
}

download () {
  # Get the video filename if not passed
  if [[ -z "${filename}" ]]; then
    writeLog "No filename given, obtaining one from yt-dlp"
    getFilename; getname_rc=$?
    if [[ ${getname_rc} != 0 ]]; then
      writeLog "Something went wrong getting the filename"
    fi
  fi

  # notify the user
  notify-send -u low "[ ${randomVidId} ]: Downloading \"$filename\""

  # escape characters that cause shell expansion
  for char in ${escape_these[@]}; do
    if [[ "${filename[@]}" =~ "${char}" ]]; then
      writeLog "Detected ${char}, escaping it in the title..."
      filename="${filename//${char}/\\${char}}"
    fi
  done

  # decode the URL if there are any encoded variables, newsboat/odysee does this
  writeLog "Decoding the URL to make systemd happy"
  decodeUrl "${link}"

  # we have everything we should need. build the command to download
  constructDownloadCommand "${filename}" "${link}"

  # write some things to the logfile about what we're about to do
  writeLog "Filename: ${filename}"
  writeLog "URL: ${link}"
  writeLog "Format: ${format}"
  writeLog "PID: ${vidQueue_pid}"

## new systemd stuff

  # Define variables
  COMMAND="${downloadCommand} \"${link}\""
  SERVICE_NAME="vidQueue_${randomVidId}"
  SERVICE_PATH="$HOME/.config/systemd/user"

  # Define the service file template as a variable
  SERVICE_TEMPLATE="
  [Unit]
  Description=vidQueue downloading for: ${randomVidId}
  After=network.target
  StartLimitInterval=10m
  StartLimitBurst=4

  [Service]
  Type=oneshot
  ExecStart=${COMMAND}
  SuccessExitStatus=0
  ExecStop=/usr/bin/rm ${SERVICE_PATH}/${SERVICE_NAME}.service

  Restart=on-failure
  RestartSec=15
  RestartSteps=3
  RestartMaxDelaySec=45
  RestartMode=direct
  StandardOutput=journal
  StandardError=journal

  [Install]
  WantedBy=multi-user.target"

  writeLog "The systemd service file: ${SERVICE_TEMPLATE}"
  # Substitute variables using envsubst and write the file to a temporary location
  echo "$SERVICE_TEMPLATE" | envsubst > "${SERVICE_PATH}/${SERVICE_NAME}.service"

  # Reload systemd, start, and enable the service
  writeLog "Reloading the systemd user daemon"
  systemctl --user daemon-reload
  writeLog "Starting the service ${SERVICE_NAME}"
  systemctl --user start $SERVICE_NAME 2>/dev/null; service_rc=$?

  if [[ ${service_rc} == 0 ]]; then
    # Clean up the temporary service file
    writeLog "Download successful, systemd cleaned up the service file at: ${SERVICE_PATH}/${SERVICE_NAME}.service"
    /usr/bin/notify-send -u normal "Finished downloading ${filename}!"
  else
    writeLog "The download failed, service file not removed. Please check the journal for more info" "error"
    /usr/bin/notify-send -u critical "[ ${randomVidId} ] - failed!"
  fi

  # capture end time
  timeEnd=$(date +%s)
  # log how long this took
  runtime=$(echo "$timeEnd - $timeStart" | bc -lq)
  writeLog "Runtime: ${runtime}s"
}

# Create the logfile before proceeding
createLogging

# Create the random unique video id
createVidId

# Tell us that we've gotten enough data to start downloading
writeLog "New instance of vidQueue started. Session ${randomVidId}"

# Start the download. Fork it to the background.
download & disown

exit 0
