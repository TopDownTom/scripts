##########################
### begin installation ###
##########################

# Verify image signature
gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig


# Alternatively, from an existing Arch Linux installation run:
pacman-key -v archlinux-version-x86_64.iso.sig


# boot the iso

# change the root password so we can SSH into it
passwd


# Verify the boot mode
# I will always be installing as MBR, no need for UEFI and the boot partition. This step un-necessary in most cases.
ls /sys/firmware/efi/efivars


# Ensure your network interface is listed and enabled
ip link


# Configure your network connection:
# Static IP address
# Dynamic IP address: use DHCP.
# Note: The installation image enables dhcpcd for wired network devices boot.
# Verify connection
ping archlinux.org


# Update the system clock
timedatectl set-ntp true


##################
### encryption ###
##################


# partition what will become the encrypted container
# create a 1G boot partition and the rest will be the encrypted lvm partition
fdisk /dev/nvme0n1


# create the LUKS encrypted container
cryptsetup luksFormat /dev/nvme0n1p2


# open the container for modification
cryptsetup open /dev/nvme0n1p2 cryptlvm


# create a physical volume on top of the opened LUKS container
pvcreate /dev/mapper/cryptlvm


# create a volume group and add the PG to it
vgcreate volGroup /dev/mapper/cryptlvm


# create logical volumes
lvcreate -L 8G volGroup -n swap
lvcreate -L 25G volGroup -n root
lvcreate -l 100%FREE volGroup -n home
lvreduce -L -256M volGroup/home


# format the filesystems
mkfs.ext4 /dev/nvme0n1
mkfs.ext4 /dev/volGroup/root
mkfs.ext4 /dev/volGroup/home
mkswap /dev/volGroup/swap


# mount the partitions
mount /dev/volGroup/root /mnt
mount --mkdir /dev/nvme0n1p1 /mnt/boot
mount --mkdir /dev/volGroup/home /mnt/home
swapon /dev/volGroup/swap


# verify the mountpoints look good
lsblk


####################
### installation ###
####################


# Update your mirrorlist and put a few United States mirrors at the top of the list.
# Install only essential packages. Wait to install user packages once the system is functional on its own.
vim /etc/pacman.d/mirrorlist
pacstrap /mnt base linux linux-firmware networkmanager stow git grub xorg-server xorg-xinit sudo openssh rsync wget vim make gcc pkg-config fakeroot lvm2


# Generate your file system table. Afterwards check /mnt/etc/fstab for errors.
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab


# Chroot into the new environment
arch-chroot /mnt


# Set the time zone and sync the system to the hardware clock
hwclock --systohc
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime


# Localization. Uncomment en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen, and generate them.
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
cat /etc/locale.gen
locale-gen


# Create the locale.conf(5) file, and set the LANG variable accordingly:
# Add this to the file listed below: LANG=en_US.UTF-8
echo "LANG=en_US.UTF-8" > /etc/locale.conf
cat /etc/locale.conf


# Create the hostname file /etc/hostname and add whatever hostname you want to the first line
echo "archVMtest" > /etc/hostname
cat /etc/hostname


# Add matching entries to hosts(5):
# If the system has a permanent IP address, it should be used instead of 127.0.1.1.
echo "127.0.0.1 localhost" > /etc/hosts
echo "::1 localhost" >> /etc/hosts


# add the following hooks to /etc/mkinitcpio.conf if not present: keyboard keymap encrypt lvm2
# example:
HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block encrypt lvm2 filesystems fsck)


# Initramfs
# For LVM, system encryption or RAID, modify mkinitcpio.conf(5) and recreate the initramfs image:
mkinitcpio -P


# get the device UUID of the LUKS superblock (i.e. where the crypt volume was set up)
blkid /dev/nvme0n1p2


# add the following cryptdevice parameter to GRUB_CMDLINE_LINUX in /etc/default/grub
cryptdevice=UUID=9111593d-4115-4786-95d9-38055bc52759:cryptlvm root=/dev/volGroup/root


# Boot loader (i use grub for this in MBR format. Install to the disk, NOT a partition)
grub-install --target=i386-pc /dev/sdx


# Generate the main grub config file
grub-mkconfig -o /boot/grub/grub.cfg


# Set the root password
passwd


# enable networkmanager. warnings about systemd are okay, we just want to ensure the symlinks exist
systemctl enable --now NetworkManager


# set PermitRootLogin yes for sshd


# enable sshd. warnings about systemd are okay, we just want to ensure the symlinks exist
systemctl enable --now sshd


# Exit the chroot environment
exit


# Unmount all partitions
umount -R /mnt


# Poweroff. Remove the installtion media then power on. Your system should boot to grub. Congrats!


#########################
### post installation ###
#########################


# Get your system up to date and investigate any errors
pacman -Syyyu


# Add users
useradd -m -g users -G wheel <user>


# Set the user's password
passwd <user>


# Add <user> to sudoers:
ln -sf /usr/bin/vim /usr/bin/vi
visudo


# Exit the root user then log in to the user to verify functionality
# Optionally, reboot to ensure everything is still working as intended. Log in as user on reboot.


# Ensure the timezone is set correctly
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime


# If migrating from an old setup copy the pacman cache to this new machine.
rsync -av /path/to/old /var/cache/pacman/pkg


# Set up ssh keys
ssh-keygen


# Add your key to github


# make some directories
sudo mkdir -m775 -p /usr/local/etc/{builds,user_configs,scripts}
sudo chown root:users /usr/local/etc/{builds,user_configs,scripts}


# Install the other packages
cd ~
wget https://raw.githubusercontent.com/TopDownTom/dotfiles/master/pkglist-t470.txt
git clone https://aur.archlinux.org/yay.git /usr/local/etc/builds/yay/
cd /usr/local/etc/builds/yay
makepkg -si


# set ParallelDownloads in pacman.conf


# get rest of the packages. this will take several minutes
cat $HOME/pkglist-t470.txt | yay -Syu --needed -


# get scripts needed for dotfiles
git clone https://github.com/TopDownTom/scripts.git /usr/local/etc/scripts
git config --global --add safe.directory /usr/local/etc/scripts
sudo ln -sf /usr/local/etc/scripts/* /usr/sbin/


# get dotfiles
git clone https://github.com/TopDownTom/dotfiles.git /usr/local/etc/user_configs/
git config --global --add safe.directory /usr/local/etc/user_configs
cd /usr/local/etc/user_configs/


# stow the user files
rm $HOME/{.bashrc,.bash_profile}
stow -vt ~ {cmus,dmenu,dunst,homeDirFiles,i3,newsboat,nvim,picom,ranger,redshift,ssh,st,texmf,user-dirs,userSystemD,vim}


# remove conflict files
sudo rm /etc/pulse/{default.pa,system.pa}
sudo rm /etc/tlp.conf


# stow the root files
cd /usr/local/etc/user_configs/
sudo stow -vt / rootItems
sudo chown -R root:root /usr/local/etc/user_configs/rootItems/


# Point vim to use my config
sudo rm /usr/bin/vi
sudo ln -s /usr/bin/nvim /usr/bin/vi
sudo -i
echo "source /usr/local/etc/user_configs/vim/.config/vim/vimrc" >> /etc/vimrc
exit


# make suckless binaries
. /usr/sbin/stMake
. /usr/sbin/dmenuMake


# Exit then re-login with user and things should work


############################
### creating other users ###
############################

# Add users
# NOTE: if they are not super users, dont include '-G wheel' here
useradd -m -g users -G wheel <user>


# Set the user's password
passwd <user>


# Add <user> to sudoers:
# NOTE: don't do this if they aren't super users
visudo


# Set up ssh keys, if you want
ssh-keygen

# exit then log in as the new user

# stow the user files
cd /usr/local/etc/user_configs/
rm $HOME/{.bashrc,.bash_profile}
stow -vt ~ {cmus,dmenu,dunst,homeDirFiles,i3,newsboat,nvim,picom,ranger,redshift,ssh,st,texmf,user-dirs,userSystemD,vim}

# repeat the above section for each user you wish to add

################
### congrats ###
################

# If things don't work from here, investigate. This could be for a variety of reasons. Likely, if you've made it this far
# though the installation went okay and its a matter of tweaking configs or whatever.

# Configuring Firefox
move $HOME/.files/homeDirFiles/.mozilla/firefox/*.default-release/chrome to whatever ~/.mozilla/firefox/*.default-release you have for your current install
in about:config - change toolkit.legacyUserProfileCustomizations.stylesheeets to true
make changes to View > Toolbars > Customize...
about:config - media.peerconnection.enabled -> false

#########
# TO DO #
#########
- script this / ansible
- make this user-agnostic as much as possible to remain portable
